def compute_x_k(x0, x1, k):
    x_prev = x0
    x = x1
    x_next = 1/9  # Inicjalizacja x_next, przyjęcie początkowej wartości
    for i in range(2, k+1):
        x_next = (10 * x - 3 * x_prev) / 3
        x_prev = x
        x = x_next
    return x, x_next

# Obliczylam wzor jawny a_n dla ciągu rekurencyjnego 
# wzór x_k = 0.191 * (1/3)^n + 0.809 * (1/3)^n
# podstawienie wzoru dla dwóch pierwszych wyrazów

def compute_x_0_and_x_1(x_k, x_k_plus_1, k):
    x_0 = 0.191 * (1/3)**0 + 0.809 * (1/3)**0
    x_1 = 0.191 * (1/3)**1 + 0.809 * (1/3)**1
   
    return x_0, x_1

# Dane początkowe
x_0 = 1
x_1 = 1/3
k = 30

# Obliczenie x_k i x_k_plus_1
x_k, x_k_plus_1 = compute_x_k(x_0, x_1, k)

# Obliczenie x_0 i x_1 rekurencyjnie w tył
x_0_backwards, x_1_backwards = compute_x_0_and_x_1(x_k, x_k_plus_1, k)

# Porównanie wyników z wartościami dokładnymi
print("x_0 (dokładne):", x_0)
print("x_1 (dokładne):", x_1)
print("x_0 (rekurencyjnie w tył):", x_0_backwards)
print("x_1 (rekurencyjnie w tył):", x_1_backwards)
